<?php declare(strict_types=1);

/**
 * Example API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace Generated\Http\Controllers;

use Crell\Serde\SerdeCommon;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\Validator;


class OrganizationsController extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        private readonly OrganizationsApiInterface $api,
        private readonly SerdeCommon $serde = new SerdeCommon(),
    )
    {
    }

    /**
     * Operation getOrganization
     *
     * Получить организацию по ID.
     *
     */
    public function getOrganization(Request $request, int $id): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'id' => $id,
                ],
                $request->all(),
            ),
            [
                'id' => [
                    'required',
                    'gte:1',
                    'integer',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        try {
            $apiResult = $this->api->getOrganization($id);
        } catch (\Exception $exception) {
            // This shouldn't happen
            report($exception);
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \Generated\DTO\OrganizationResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \Generated\DTO\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \Generated\DTO\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \Generated\DTO\Error) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation listOrganizations
     *
     * Получить список организаций.
     *
     */
    public function listOrganizations(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [

                ],
                $request->all(),
            ),
            [
                'buildingId' => [
                    'gte:1',
                    'integer',
                ],
                'activityId' => [
                    'gte:1',
                    'integer',
                ],
                'name' => [
                    'min:1',
                    'max:255',
                    'string',
                ],
                'latitude' => [
                    'gte:-90',
                    'lte:90',
                ],
                'longitude' => [
                    'gte:-180',
                    'lte:180',
                ],
                'radiusMeters' => [
                    'gte:1',
                    'lte:50000',
                    'integer',
                ],
                'limit' => [
                    'gte:1',
                    'lte:100',
                    'integer',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $buildingId = $request->integer('buildingId');

        $activityId = $request->integer('activityId');

        $name = $request->string('name')->value();

        $latitude = $request->float('latitude');

        $longitude = $request->float('longitude');

        $radiusMeters = $request->integer('radiusMeters');

        $limit = $request->integer('limit');

        try {
            $apiResult = $this->api->listOrganizations($buildingId, $activityId, $name, $latitude, $longitude, $radiusMeters, $limit);
        } catch (\Exception $exception) {
            // This shouldn't happen
            report($exception);
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \Generated\DTO\ListOrganizationsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \Generated\DTO\ValidationError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \Generated\DTO\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \Generated\DTO\Error) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
}
