openapi: 3.0.3
info:
  title: Foo API
  version: 1.0.0
  description: |
    HTTP API для управления балансами пользователей.
    Функционал: депозит, списание, перевод, получение баланса.
    Все ответы и ошибки в JSON. Денежные операции атомарны (в транзакциях БД).
servers:
  - url: http://localhost:8080
    description: Local (Docker)

tags:
  - name: Balance
    description: Получение текущего баланса пользователя
  - name: Transactions
    description: Денежные операции (депозит, списание, перевод)

paths:
  /api/deposit:
    post:
      tags: [Transactions]
      summary: Начисление средств пользователю
      description: Создаёт транзакцию с типом `deposit` и увеличивает баланс пользователя.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositRequest'
            examples:
              default:
                value:
                  user_id: 1
                  amount: "500.00"
                  comment: "Пополнение через карту"
      responses:
        200:
          description: Успешное начисление
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResult'
        400:
          $ref: '#/components/responses/BadRequest'
        422:
          $ref: '#/components/responses/UnprocessableEntity'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'

  /api/withdraw:
    post:
      tags: [Transactions]
      summary: Списание средств
      description: Создаёт транзакцию с типом `withdraw` и уменьшает баланс. Баланс не может стать отрицательным.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawRequest'
            examples:
              default:
                value:
                  user_id: 1
                  amount: "200.00"
                  comment: "Покупка подписки"
      responses:
        200:
          description: Успешное списание
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResult'
        400:
          $ref: '#/components/responses/BadRequest'
        422:
          $ref: '#/components/responses/UnprocessableEntity'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'

  /api/transfer:
    post:
      tags: [Transactions]
      summary: Перевод между пользователями
      description: |
        Переводит средства от пользователя `from_user_id` к `to_user_id`.
        Создаются две транзакции: `transfer_out` у отправителя и `transfer_in` у получателя.
        Баланс отправителя не может стать отрицательным.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
            examples:
              default:
                value:
                  from_user_id: 1
                  to_user_id: 2
                  amount: "150.00"
                  comment: "Перевод другу"
      responses:
        200:
          description: Успешный перевод
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResult'
        400:
          $ref: '#/components/responses/BadRequest'
        422:
          $ref: '#/components/responses/UnprocessableEntity'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'

  /api/balance/{user_id}:
    get:
      tags: [Balance]
      summary: Получение баланса пользователя
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      responses:
        200:
          description: Текущий баланс пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
              examples:
                default:
                  value:
                    user_id: 1
                    balance: "350.00"
        404:
          $ref: '#/components/responses/NotFound'

  /api/users/{user_id}/transactions:
    get:
      tags: [Transactions]
      summary: История транзакций пользователя
      description: Возвращает постраничный список транзакций пользователя по убыванию даты.
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
        - in: query
          name: page
          required: false
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: pageSize
          required: false
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      responses:
        200:
          description: Список транзакций
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionPage'
        404:
          $ref: '#/components/responses/NotFound'

components:
  parameters:
    UserIdPath:
      name: user_id
      in: path
      required: true
      description: Идентификатор пользователя
      schema:
        type: integer
        minimum: 1

  schemas:
    Money:
      type: string
      description: Денежная сумма с двумя знаками после запятой
      pattern: '^[0-9]+(\.[0-9]{1,2})?$'
      example: "500.00"

    Error:
      type: object
      required: [message]
      properties:
        message:
          type: string
          description: Человеко-читаемое описание ошибки
        code:
          type: string
          description: Короткий код ошибки (например, VALIDATION_ERROR, NOT_FOUND, CONFLICT)
        details:
          type: object
          description: Полезные детали (например, ошибки полей)
          additionalProperties: true

    TransactionType:
      type: string
      enum: [deposit, withdraw, transfer_in, transfer_out]
      description: Статус/тип транзакции

    Transaction:
      type: object
      required: [id, user_id, type, amount, created_at]
      properties:
        id:
          type: integer
          minimum: 1
          description: Идентификатор транзакции
        user_id:
          type: integer
          minimum: 1
        type:
          $ref: '#/components/schemas/TransactionType'
        amount:
          $ref: '#/components/schemas/Money'
        comment:
          type: string
          maxLength: 255
          nullable: true
        related_user_id:
          type: integer
          minimum: 1
          nullable: true
          description: В переводах — вторая сторона операции
        created_at:
          type: string
          format: date-time

    DepositRequest:
      type: object
      required: [user_id, amount]
      properties:
        user_id:
          type: integer
          minimum: 1
        amount:
          $ref: '#/components/schemas/Money'
        comment:
          type: string
          maxLength: 255
          nullable: true

    WithdrawRequest:
      type: object
      required: [user_id, amount]
      properties:
        user_id:
          type: integer
          minimum: 1
        amount:
          $ref: '#/components/schemas/Money'
        comment:
          type: string
          maxLength: 255
          nullable: true

    TransferRequest:
      type: object
      required: [from_user_id, to_user_id, amount]
      properties:
        from_user_id:
          type: integer
          minimum: 1
        to_user_id:
          type: integer
          minimum: 1
        amount:
          $ref: '#/components/schemas/Money'
        comment:
          type: string
          maxLength: 255
          nullable: true

    TransactionResult:
      type: object
      description: Результат единичной операции (депозит/списание)
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'
        balance:
          $ref: '#/components/schemas/Money'
      required: [transaction, balance]

    TransferResult:
      type: object
      description: Результат перевода между пользователями
      properties:
        from_transaction:
          $ref: '#/components/schemas/Transaction'
        to_transaction:
          $ref: '#/components/schemas/Transaction'
        from_user_balance:
          $ref: '#/components/schemas/Money'
        to_user_balance:
          $ref: '#/components/schemas/Money'
      required: [from_transaction, to_transaction, from_user_balance, to_user_balance]

    BalanceResponse:
      type: object
      required: [user_id, balance]
      properties:
        user_id:
          type: integer
          minimum: 1
        balance:
          $ref: '#/components/schemas/Money'

    TransactionPage:
      type: object
      required: [data, page, pageSize, total]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        page:
          type: integer
          minimum: 1
        pageSize:
          type: integer
          minimum: 1
          maximum: 100
        total:
          type: integer
          minimum: 0

  responses:
    BadRequest:
      description: Ошибка запроса (например, неверный JSON)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            bad_json:
              value:
                message: Неверный формат запроса
                code: BAD_REQUEST
    UnprocessableEntity:
      description: Ошибки валидации входных данных
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            validation:
              value:
                message: Ошибка валидации
                code: VALIDATION_ERROR
                details:
                  amount: ["Значение должно быть положительным и с точностью до копеек"]
    NotFound:
      description: Пользователь не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            user_not_found:
              value:
                message: Пользователь не найден
                code: NOT_FOUND
    Conflict:
      description: Конфликт (например, недостаточно средств)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            insufficient_funds:
              value:
                message: Недостаточно средств
                code: INSUFFICIENT_FUNDS
